// +build !ignore_autogenerated

// Code generated by mga tool. DO NOT EDIT.

package messagingdriver

import (
	"context"
	"errors"
	"github.com/go-kit/kit/endpoint"
	"github.com/prasetyowira/message/internal/app/chat_app/messaging"
	kitxendpoint "github.com/sagikazarmark/kitx/endpoint"
)

// endpointError identifies an error that should be returned as an endpoint error.
type endpointError interface {
	EndpointError() bool
}

// serviceError identifies an error that should be returned as a service error.
type serviceError interface {
	ServiceError() bool
}

// Endpoints collects all of the endpoints that compose the underlying service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	CreateMessage endpoint.Endpoint
	GetMessage    endpoint.Endpoint
	ListMessages  endpoint.Endpoint
}

// MakeEndpoints returns a(n) Endpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func MakeEndpoints(service messaging.Service, middleware ...endpoint.Middleware) Endpoints {
	mw := kitxendpoint.Combine(middleware...)

	return Endpoints{
		CreateMessage: kitxendpoint.OperationNameMiddleware("messaging.CreateMessage")(mw(MakeCreateMessageEndpoint(service))),
		GetMessage:    kitxendpoint.OperationNameMiddleware("messaging.GetMessage")(mw(MakeGetMessageEndpoint(service))),
		ListMessages:  kitxendpoint.OperationNameMiddleware("messaging.ListMessages")(mw(MakeListMessagesEndpoint(service))),
	}
}

// CreateMessageRequest is a request struct for CreateMessage endpoint.
type CreateMessageRequest struct {
	Text string
}

// CreateMessageResponse is a response struct for CreateMessage endpoint.
type CreateMessageResponse struct {
	ID  string
	Err error
}

func (r CreateMessageResponse) Failed() error {
	return r.Err
}

// MakeCreateMessageEndpoint returns an endpoint for the matching method of the underlying service.
func MakeCreateMessageEndpoint(service messaging.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(CreateMessageRequest)

		id, err := service.CreateMessage(ctx, req.Text)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return CreateMessageResponse{
					Err: err,
					ID:  id,
				}, nil
			}

			return CreateMessageResponse{
				Err: err,
				ID:  id,
			}, err
		}

		return CreateMessageResponse{ID: id}, nil
	}
}

// GetMessageRequest is a request struct for GetMessage endpoint.
type GetMessageRequest struct {
	Id string
}

// GetMessageResponse is a response struct for GetMessage endpoint.
type GetMessageResponse struct {
	Message messaging.Message
	Err     error
}

func (r GetMessageResponse) Failed() error {
	return r.Err
}

// MakeGetMessageEndpoint returns an endpoint for the matching method of the underlying service.
func MakeGetMessageEndpoint(service messaging.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(GetMessageRequest)

		message, err := service.GetMessage(ctx, req.Id)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return GetMessageResponse{
					Err:     err,
					Message: message,
				}, nil
			}

			return GetMessageResponse{
				Err:     err,
				Message: message,
			}, err
		}

		return GetMessageResponse{Message: message}, nil
	}
}

// ListMessagesRequest is a request struct for ListMessages endpoint.
type ListMessagesRequest struct{}

// ListMessagesResponse is a response struct for ListMessages endpoint.
type ListMessagesResponse struct {
	Messages []messaging.Message
	Err      error
}

func (r ListMessagesResponse) Failed() error {
	return r.Err
}

// MakeListMessagesEndpoint returns an endpoint for the matching method of the underlying service.
func MakeListMessagesEndpoint(service messaging.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		messages, err := service.ListMessages(ctx)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return ListMessagesResponse{
					Err:      err,
					Messages: messages,
				}, nil
			}

			return ListMessagesResponse{
				Err:      err,
				Messages: messages,
			}, err
		}

		return ListMessagesResponse{Messages: messages}, nil
	}
}
